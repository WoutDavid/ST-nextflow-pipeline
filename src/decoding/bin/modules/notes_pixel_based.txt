
how?
- make a normalized intensity vector for each pixel
- make the "ideal" same intensity vector for each barcode
- calculate the distance between all vectors, and match the closest ones
- put a threshold on it to filter out pixels that arent actually spots
- combine pixels into units with skimage.measure.label

from High-throughput single-cell gene-expression profiling with multiplexed error-robust fluorescence in situ hybridization, Moffit et al. 2016

 To decode these images, we first recognized a few geometric properties of this problem. First, each set of 16 normalized intensity values observed for each pixel in each FOV represents a vector in 16-dimensional space; we term this vector a “pixel vector”; second, the 140 barcodes of our 16-bit MHD4 code represent preferred directions in this space; and, finally, the set of all 16 single-bit errors generated from any of the 140 barcodes define a unique volume within this space, containing the set of all possible deviations from these barcodes that correspond to a single-bit error (or less in the case of an analog signal). The central premise of our decoding approach was that pixel vectors that fell within the volume defined by all single-bit errors from a given barcode should be associated with that barcode (we term this volume “Hamming-sphere 1,” HS1). To identify all pixel vectors that fell within one of the 140 different HS1s, we first mapped each pixel vector to the 16-dimensional unit sphere by dividing it by its magnitude, i.e., the L2-norm. All barcodes were mapped to the unit sphere in a similar fashion. Because all barcodes shared the same Hamming weight, the HS1 for each barcode was defined by the same distance; in this case the maximum Euclidean distance between a barcode and all single-bit errors was 0.5176. Thus, occupancy in this volume could be calculated simply by determining the nearest barcode for each pixel vector and thresholding on the distance to that barcode. Any pixel vector with a distance to the nearest barcode larger than 0.5176 was left unassigned.       


 From starfish:
"find the nearest code for each feature using the ball_tree approximate NN algorith"
