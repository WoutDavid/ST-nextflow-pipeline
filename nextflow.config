//global parameters:
params {
    //boilerplate params
    help=false

    //Pipeline functionality params:
    target_x_reso=2100
    target_y_reso=2100
    filter_radius=15
    min_sigma = 1
    max_sigma = 5

    //Locate the image image processing scripts   
    image_processing_dir = "${baseDir}/image_processing/"
 
}
profiles {
    private_pc {
        params {
            //These are supposed to be changed
            dataDir = "/media/david/Puzzles/starfish_test_data/ExampleInSituSequencing/"
            outDir="/home/david/Documents/communISS/results/"
            codebook = "/media/david/Puzzles/starfish_test_data/ExampleInSituSequencing/codebook_wrong.csv"
            extension = "TIF"
        }
    }
    work_pc {
        params {
            //These are supposed to be changed
            dataDir = "/media/tool/starfish_test_data/ExampleInSituSequencing/"
            outDir="/home/nacho/Documents/Code/communISS/results/"
            codebook = "/media/tool/starfish_test_data/ExampleInSituSequencing/codebook.csv"
            extension = "TIF"
        }
    }
    test_cartana_data{
        params{
            dataDir = "/media/tool/moved_from_m2/cartana_test_stitched/"
            outDir="/media/tool/moved_from_m2/cartana_test_stitched/results"
            codebook="/media/tool/moved_from_m2/cartana_test_stitched/results"
            extension = "tif"
        }
        executor {
            cpus = 8
            memory = '64 GB'
        }
    }

}
    


params {
    
    //These should be the same for every implementation
    transform_path = "${image_processing_dir}registration/calculateTransform.py"
    register_path = "${image_processing_dir}registration/rigidRegister.py"
    tiling_path = "${image_processing_dir}tiling_nextflow.py"
    filtering_path= "${image_processing_dir}filtering.py"
    spot_detection_path= "${image_processing_dir}spotDetection.py"
    gather_intensity_path= "${image_processing_dir}gatherIntensities.py"
    calculateOptimalTileSize_path="${image_processing_dir}calculateOptimalTileSize.py"
    getMaxIntensity_path="${image_processing_dir}getMaxIntensity.py"
    decoding_path="${image_processing_dir}decoding.py"
    image_viewing_path="${image_processing_dir}imageViewing.py"
    pad_path="${image_processing_dir}padImageBlack.py"
    reference = "${dataDir}DO/REF.${extension}"
}